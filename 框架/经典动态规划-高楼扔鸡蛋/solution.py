"""
887. 鸡蛋掉落
你将获得 K 个鸡蛋，并可以使用一栋从 1 到 N  共有 N 层楼的建筑。

每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。

你知道存在楼层 F ，满足 0 <= F <= N 任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。

每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 1 <= X <= N）。

你的目标是确切地知道 F 的值是多少。

无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？

示例 1：
输入：K = 1, N = 2
输出：2
解释：
鸡蛋从 1 楼掉落。如果它碎了，我们肯定知道 F = 0 。
否则，鸡蛋从 2 楼掉落。如果它碎了，我们肯定知道 F = 1 。
如果它没碎，那么我们肯定知道 F = 2 。
因此，在最坏的情况下我们需要移动 2 次以确定 F 是多少。

示例 2：
输入：K = 2, N = 6
输出：3

示例 3：
输入：K = 3, N = 14
输出：4
"""
mem = {}


def solution(K, N):
    if N == 0:
        return 0  # 如果是0楼层；
    if K == 1:
        return N  # 最坏的情况，全扫描
    if mem.get((K, N)):
        return mem.get((K, N))
    # 在第i层楼，坏与不坏的状态下 最大的移动次数
    res = 100000
    for i in range(1,N+1): #错误:range(N);应当是range(1,N+1),i需要从1开始遍历
        # res = max(res, min(solution(K - 1, i - 1), solution(K, i + 1)))  # 版本1写法错误，这里存在重复计算
        # res = min(res, max(solution(K - 1, i - 1), solution(K, i + 1)))  #版本2写法错误，这里会报for i in range(N):，RecursionError: maximum recursion depth exceeded in comparison
        res = min(res, max(solution(K - 1, i - 1), solution(K, N-i))+1)  #版本3,需要加1（注意方向，这里i-1，表示向下；而N-i表示向上遍历,这个地方方向只会影响为遍历的层数，于实际楼层的索引无关，至于多少层有关）
    mem[(K, N)] = res  # 存储每个状态：即鸡蛋个数和楼层数确定的情况下，最小的移动次数；后续高楼可能会计算小的楼层或少的鸡蛋数；
    return res


"""
自我总结：
（注意方向，这里i-1，表示向下；而N-i表示向上遍历,这个地方方向只会影响为遍历的层数，于实际楼层的索引无关，至于多少层有关；例如1-3层，共3层；与5-8层，共3层处理方式是一样的）
"""


if __name__ == '__main__':
    # rst = solution(2, 6)
    rst = solution(3, 14)
    print("rst is ", rst)
